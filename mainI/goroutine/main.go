package main

import (
	"fmt"
	"time"
)

func f(from string) {
	for i := 0; i < 1000; i++ {
		fmt.Println(from, ":", i)
	}
}

// golang 协程
// 协程(goroutine) 是轻量级的执行线程
func main() {

	//f("direct")

	//现在两个协程在独立的协程中 异步地 运行， 然后等待两个协程完成（更好的方法是使用 WaitGroup

	//使用 go f(s) 在一个协程中调用这个函数。 这个新的 Go 协程将会 并发地 执行这个函数。
	go f("goroutine")

	//你也可以为匿名函数启动一个协程
	go func(msg string) {
		for i := 0; i < 1000; i++ {
			fmt.Println(msg, i)
		}

	}("going")

	time.Sleep(time.Second * 2)
	fmt.Println("done")
}

//进程是操作系统进行资源分配和调度的一个基本单位。每个进程都有自己的独立内存空间，不同进程通过进程间通信来通信。
//进程上下文进程间的切换开销（栈、寄存器、虚拟内存、文件句柄等）比较大，但相对比较稳定安全。

//线程是CPU调度和分派的基本单位，一个进程可以拥有多个线程。线程自己基本上不拥有系统资源,只拥有少部分的资源(如程序计数器，一组寄存器和栈)。
//线程间通信主要通过共享内存，上下文切换很快，资源开销较少，但相比进程不够稳定容易丢失数据。

//协程是一种用户态的轻量级线程，一个线程也可以拥有多个协程。
//协程的调度完全由用户控制。协程拥有自己的寄存器上下文和栈。协程的上下文切换非常快。

//管程是一种程序结构，结构内的多个子程序（对象或模块）形成的多个工作线程互斥访问共享资源。
//在一个时间点，最多只有一个工作线程在执行管程的某个子程序。管程实际上是定义的一种数据结构和控制进程的一些操作的集合。
